// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("height", Value.fromBigInt(BigInt.zero()));
    this.set("StartTime", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Account entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get height(): BigInt {
    let value = this.get("height");
    return value!.toBigInt();
  }

  set height(value: BigInt) {
    this.set("height", Value.fromBigInt(value));
  }

  get StartTime(): string {
    let value = this.get("StartTime");
    return value!.toString();
  }

  set StartTime(value: string) {
    this.set("StartTime", Value.fromString(value));
  }

  get StakedNEAR(): BigInt | null {
    let value = this.get("StakedNEAR");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set StakedNEAR(value: BigInt | null) {
    if (!value) {
      this.unset("StakedNEAR");
    } else {
      this.set("StakedNEAR", Value.fromBigInt(<BigInt>value));
    }
  }

  get MintedLinear(): BigInt | null {
    let value = this.get("MintedLinear");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set MintedLinear(value: BigInt | null) {
    if (!value) {
      this.unset("MintedLinear");
    } else {
      this.set("MintedLinear", Value.fromBigInt(<BigInt>value));
    }
  }

  get UnstakeLinear(): BigInt | null {
    let value = this.get("UnstakeLinear");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set UnstakeLinear(value: BigInt | null) {
    if (!value) {
      this.unset("UnstakeLinear");
    } else {
      this.set("UnstakeLinear", Value.fromBigInt(<BigInt>value));
    }
  }

  get UnstakeGetNear(): BigInt | null {
    let value = this.get("UnstakeGetNear");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set UnstakeGetNear(value: BigInt | null) {
    if (!value) {
      this.unset("UnstakeGetNear");
    } else {
      this.set("UnstakeGetNear", Value.fromBigInt(<BigInt>value));
    }
  }

  get FeesPayed(): BigInt | null {
    let value = this.get("FeesPayed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set FeesPayed(value: BigInt | null) {
    if (!value) {
      this.unset("FeesPayed");
    } else {
      this.set("FeesPayed", Value.fromBigInt(<BigInt>value));
    }
  }

  get Earned1(): BigInt | null {
    let value = this.get("Earned1");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set Earned1(value: BigInt | null) {
    if (!value) {
      this.unset("Earned1");
    } else {
      this.set("Earned1", Value.fromBigInt(<BigInt>value));
    }
  }

  get Earned2(): BigInt | null {
    let value = this.get("Earned2");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set Earned2(value: BigInt | null) {
    if (!value) {
      this.unset("Earned2");
    } else {
      this.set("Earned2", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Price extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timeStamp", Value.fromString(""));
    this.set("price", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Price entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Price entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Price", id.toString(), this);
    }
  }

  static load(id: string): Price | null {
    return changetype<Price | null>(store.get("Price", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timeStamp(): string {
    let value = this.get("timeStamp");
    return value!.toString();
  }

  set timeStamp(value: string) {
    this.set("timeStamp", Value.fromString(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value!.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }
}

export class LpApy extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timeStamp", Value.fromString(""));
    this.set("feesPayed", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LpApy entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LpApy entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LpApy", id.toString(), this);
    }
  }

  static load(id: string): LpApy | null {
    return changetype<LpApy | null>(store.get("LpApy", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timeStamp(): string {
    let value = this.get("timeStamp");
    return value!.toString();
  }

  set timeStamp(value: string) {
    this.set("timeStamp", Value.fromString(value));
  }

  get feesPayed(): BigInt {
    let value = this.get("feesPayed");
    return value!.toBigInt();
  }

  set feesPayed(value: BigInt) {
    this.set("feesPayed", Value.fromBigInt(value));
  }
}
